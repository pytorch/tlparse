V0318 16:58:12.090000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/test/export/test_draft_export.py", 0]}
V0318 16:58:12.091000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/testing/_internal/common_utils.py", 1]}
V0318 16:58:12.091000 3104603 torch/_logging/structured.py:27] {"str": ["/home/angelayi/.conda/envs/pytorch-3.10/lib/python3.10/unittest/main.py", 2]}
V0318 16:58:12.091000 3104603 torch/_logging/structured.py:27] {"str": ["/home/angelayi/.conda/envs/pytorch-3.10/lib/python3.10/unittest/runner.py", 3]}
V0318 16:58:12.092000 3104603 torch/_logging/structured.py:27] {"str": ["/home/angelayi/.conda/envs/pytorch-3.10/lib/python3.10/unittest/suite.py", 4]}
V0318 16:58:12.092000 3104603 torch/_logging/structured.py:27] {"str": ["/home/angelayi/.conda/envs/pytorch-3.10/lib/python3.10/unittest/case.py", 5]}
V0318 16:58:12.092000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/export/_draft_export.py", 6]}
V0318 16:58:12.092000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/export/_trace.py", 7]}
V0318 16:58:12.092000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/export/exported_program.py", 8]}
V0318 16:58:12.092000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_logging/_internal.py", 9]}
V0318 16:58:12.107000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_export/non_strict_utils.py", 10]}
V0318 16:58:12.108000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/utils/_pytree.py", 11]}
V0318 16:58:12.108000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_subclasses/fake_tensor.py", 12]}
V0318 16:58:12.108000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_subclasses/meta_utils.py", 13]}
V0318 16:58:12.140000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/fx/experimental/recording.py", 14]}
V0318 16:58:12.141000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/fx/experimental/symbolic_shapes.py", 15]}
V0318 16:58:12.142000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/fx/experimental/sym_node.py", 16]}
V0318 16:58:12.157000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_functorch/_aot_autograd/functional_utils.py", 17]}
V0318 16:58:12.157000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_subclasses/functional_tensor.py", 18]}
V0318 16:58:12.157000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_functorch/aot_autograd.py", 19]}
V0318 16:58:12.157000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_functorch/_aot_autograd/collect_metadata_analysis.py", 20]}
V0318 16:58:12.163000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/nn/modules/module.py", 21]}
V0318 16:58:12.163000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_functorch/_aot_autograd/utils.py", 22]}
V0318 16:58:12.163000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_functorch/_aot_autograd/traced_function_transforms.py", 23]}
V0318 16:58:12.166000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/__init__.py", 24]}
V0318 16:58:12.164000 3104603 torch/_logging/_internal.py:1305] {"expression_created": {"method": "eq", "result": "Eq(s0, 3)", "result_id": 140311800656080, "arguments": ["s0", "3"], "argument_ids": [140311800650992], "user_stack": [{"line": 1751, "name": "_wrapped_call_impl", "filename": 21, "loc": "return self._call_impl(*args, **kwargs)"}, {"line": 1762, "name": "_call_impl", "filename": 21, "loc": "return forward_call(*args, **kwargs)"}, {"line": 297, "name": "forward", "filename": 0, "loc": "assert a.shape[0] == 3"}], "stack": [{"line": 1751, "name": "_wrapped_call_impl", "filename": 21, "loc": "return self._call_impl(*args, **kwargs)"}, {"line": 1762, "name": "_call_impl", "filename": 21, "loc": "return forward_call(*args, **kwargs)"}, {"line": 297, "name": "forward", "filename": 0, "loc": "assert a.shape[0] == 3"}]}, "stack": [{"line": 545, "name": "<module>", "filename": 0, "loc": "run_tests()"}, {"line": 1342, "name": "run_tests", "filename": 1, "loc": "unittest.main(argv=argv)"}, {"line": 101, "name": "__init__", "filename": 2, "loc": "self.runTests()"}, {"line": 271, "name": "runTests", "filename": 2, "loc": "self.result = testRunner.run(self.test)"}, {"line": 184, "name": "run", "filename": 3, "loc": "test(result)"}, {"line": 84, "name": "__call__", "filename": 4, "loc": "return self.run(*args, **kwds)"}, {"line": 122, "name": "run", "filename": 4, "loc": "test(result)"}, {"line": 84, "name": "__call__", "filename": 4, "loc": "return self.run(*args, **kwds)"}, {"line": 122, "name": "run", "filename": 4, "loc": "test(result)"}, {"line": 650, "name": "__call__", "filename": 5, "loc": "return self.run(*args, **kwds)"}, {"line": 3321, "name": "run", "filename": 1, "loc": "self._run_custom("}, {"line": 3293, "name": "_run_custom", "filename": 1, "loc": "super_run(result=result)"}, {"line": 591, "name": "run", "filename": 5, "loc": "self._callTestMethod(testMethod)"}, {"line": 549, "name": "_callTestMethod", "filename": 5, "loc": "method()"}, {"line": 3153, "name": "wrapper", "filename": 1, "loc": "method(*args, **kwargs)"}, {"line": 302, "name": "test_shape_failure", "filename": 0, "loc": "ep = draft_export(M(), inp, dynamic_shapes={\"a\": {0: Dim(\"a0\")}})"}, {"line": 374, "name": "draft_export", "filename": 6, "loc": "ep = _export("}, {"line": 1065, "name": "wrapper", "filename": 7, "loc": "ep = fn(*args, **kwargs)"}, {"line": 121, "name": "wrapper", "filename": 8, "loc": "return fn(*args, **kwargs)"}, {"line": 2089, "name": "_export", "filename": 7, "loc": "export_artifact = export_func(  # type: ignore[operator]"}, {"line": 1873, "name": "_non_strict_export", "filename": 7, "loc": "aten_export_artifact = _to_aten_func(  # type: ignore[operator]"}, {"line": 815, "name": "_export_to_aten_ir", "filename": 7, "loc": "gm, graph_signature = transform(aot_export_module)("}, {"line": 1812, "name": "_aot_export_non_strict", "filename": 7, "loc": "gm, sig = aot_export(wrapped_mod, args, kwargs=kwargs, **flags)"}, {"line": 1347, "name": "aot_export_module", "filename": 19, "loc": "fx_g, metadata, in_spec, out_spec = _aot_export_function("}, {"line": 1586, "name": "_aot_export_function", "filename": 19, "loc": "fx_g, meta = create_aot_dispatcher_function("}, {"line": 570, "name": "create_aot_dispatcher_function", "filename": 19, "loc": "return _create_aot_dispatcher_function("}, {"line": 671, "name": "_create_aot_dispatcher_function", "filename": 19, "loc": "fw_metadata = run_functionalized_fw_and_collect_metadata("}, {"line": 197, "name": "inner", "filename": 20, "loc": "flat_f_outs = f(*flat_f_args)"}, {"line": 184, "name": "flat_fn", "filename": 22, "loc": "tree_out = fn(*args, **kwargs)"}, {"line": 903, "name": "functional_call", "filename": 23, "loc": "out = mod(*args[params_len:], **kwargs)"}, {"line": 1751, "name": "_wrapped_call_impl", "filename": 21, "loc": "return self._call_impl(*args, **kwargs)"}, {"line": 1762, "name": "_call_impl", "filename": 21, "loc": "return forward_call(*args, **kwargs)"}, {"line": 1796, "name": "forward", "filename": 7, "loc": "tree_out = mod(*args, **kwargs)"}, {"line": 1751, "name": "_wrapped_call_impl", "filename": 21, "loc": "return self._call_impl(*args, **kwargs)"}, {"line": 1762, "name": "_call_impl", "filename": 21, "loc": "return forward_call(*args, **kwargs)"}, {"line": 297, "name": "forward", "filename": 0, "loc": "assert a.shape[0] == 3"}, {"line": 1749, "name": "binary_magic_impl", "filename": 16, "loc": "ret = wrap_node(getattr(self.node, method_attr)(other_node))"}, {"line": 375, "name": "eq", "filename": 16, "loc": "return self._eq(other)  # type: ignore[attr-defined]"}, {"line": 1287, "name": "wrapper", "filename": 16, "loc": "dtrace_structured("}, {"line": 1305, "name": "dtrace_structured", "filename": 9, "loc": "trace_structured("}]}
V0318 16:58:12.167000 3104603 torch/_logging/_internal.py:1305] {"guard_added": {"expr": "Eq(s0, 3)", "prefix": "eval", "expr_node_id": 140311800656080, "user_stack": [{"line": 1751, "name": "_wrapped_call_impl", "filename": 21, "loc": "return self._call_impl(*args, **kwargs)"}, {"line": 1762, "name": "_call_impl", "filename": 21, "loc": "return forward_call(*args, **kwargs)"}, {"line": 297, "name": "forward", "filename": 0, "loc": "assert a.shape[0] == 3"}], "stack": [{"line": 1751, "name": "_wrapped_call_impl", "filename": 21, "loc": "return self._call_impl(*args, **kwargs)"}, {"line": 1762, "name": "_call_impl", "filename": 21, "loc": "return forward_call(*args, **kwargs)"}, {"line": 297, "name": "forward", "filename": 0, "loc": "assert a.shape[0] == 3"}], "symbol_to_sources": {"s0": "L['args'][0][0].size()[0]"}, "frame_locals": {"loc": "assert a.shape[0] == 3", "locals": {"a": "Tensor(shape: torch.Size([s0, 3]), stride: (3, 1), storage_offset: 0)"}, "symbols": {"s0": "L['args'][0][0].size()[0]"}}}, "stack": [{"line": 545, "name": "<module>", "filename": 0, "loc": "run_tests()"}, {"line": 1342, "name": "run_tests", "filename": 1, "loc": "unittest.main(argv=argv)"}, {"line": 101, "name": "__init__", "filename": 2, "loc": "self.runTests()"}, {"line": 271, "name": "runTests", "filename": 2, "loc": "self.result = testRunner.run(self.test)"}, {"line": 184, "name": "run", "filename": 3, "loc": "test(result)"}, {"line": 84, "name": "__call__", "filename": 4, "loc": "return self.run(*args, **kwds)"}, {"line": 122, "name": "run", "filename": 4, "loc": "test(result)"}, {"line": 84, "name": "__call__", "filename": 4, "loc": "return self.run(*args, **kwds)"}, {"line": 122, "name": "run", "filename": 4, "loc": "test(result)"}, {"line": 650, "name": "__call__", "filename": 5, "loc": "return self.run(*args, **kwds)"}, {"line": 3321, "name": "run", "filename": 1, "loc": "self._run_custom("}, {"line": 3293, "name": "_run_custom", "filename": 1, "loc": "super_run(result=result)"}, {"line": 591, "name": "run", "filename": 5, "loc": "self._callTestMethod(testMethod)"}, {"line": 549, "name": "_callTestMethod", "filename": 5, "loc": "method()"}, {"line": 3153, "name": "wrapper", "filename": 1, "loc": "method(*args, **kwargs)"}, {"line": 302, "name": "test_shape_failure", "filename": 0, "loc": "ep = draft_export(M(), inp, dynamic_shapes={\"a\": {0: Dim(\"a0\")}})"}, {"line": 374, "name": "draft_export", "filename": 6, "loc": "ep = _export("}, {"line": 1065, "name": "wrapper", "filename": 7, "loc": "ep = fn(*args, **kwargs)"}, {"line": 121, "name": "wrapper", "filename": 8, "loc": "return fn(*args, **kwargs)"}, {"line": 2089, "name": "_export", "filename": 7, "loc": "export_artifact = export_func(  # type: ignore[operator]"}, {"line": 1873, "name": "_non_strict_export", "filename": 7, "loc": "aten_export_artifact = _to_aten_func(  # type: ignore[operator]"}, {"line": 815, "name": "_export_to_aten_ir", "filename": 7, "loc": "gm, graph_signature = transform(aot_export_module)("}, {"line": 1812, "name": "_aot_export_non_strict", "filename": 7, "loc": "gm, sig = aot_export(wrapped_mod, args, kwargs=kwargs, **flags)"}, {"line": 1347, "name": "aot_export_module", "filename": 19, "loc": "fx_g, metadata, in_spec, out_spec = _aot_export_function("}, {"line": 1586, "name": "_aot_export_function", "filename": 19, "loc": "fx_g, meta = create_aot_dispatcher_function("}, {"line": 570, "name": "create_aot_dispatcher_function", "filename": 19, "loc": "return _create_aot_dispatcher_function("}, {"line": 671, "name": "_create_aot_dispatcher_function", "filename": 19, "loc": "fw_metadata = run_functionalized_fw_and_collect_metadata("}, {"line": 197, "name": "inner", "filename": 20, "loc": "flat_f_outs = f(*flat_f_args)"}, {"line": 184, "name": "flat_fn", "filename": 22, "loc": "tree_out = fn(*args, **kwargs)"}, {"line": 903, "name": "functional_call", "filename": 23, "loc": "out = mod(*args[params_len:], **kwargs)"}, {"line": 1751, "name": "_wrapped_call_impl", "filename": 21, "loc": "return self._call_impl(*args, **kwargs)"}, {"line": 1762, "name": "_call_impl", "filename": 21, "loc": "return forward_call(*args, **kwargs)"}, {"line": 1796, "name": "forward", "filename": 7, "loc": "tree_out = mod(*args, **kwargs)"}, {"line": 1751, "name": "_wrapped_call_impl", "filename": 21, "loc": "return self._call_impl(*args, **kwargs)"}, {"line": 1762, "name": "_call_impl", "filename": 21, "loc": "return forward_call(*args, **kwargs)"}, {"line": 297, "name": "forward", "filename": 0, "loc": "assert a.shape[0] == 3"}, {"line": 746, "name": "__bool__", "filename": 24, "loc": "return self.node.bool_()"}, {"line": 596, "name": "bool_", "filename": 16, "loc": "return self.guard_bool(\"\", 0)"}, {"line": 536, "name": "guard_bool", "filename": 16, "loc": "r = self.evaluate()"}, {"line": 510, "name": "evaluate", "filename": 16, "loc": "return self.shape_env.evaluate_sym_node(self, size_oblivious)"}, {"line": 6656, "name": "evaluate_sym_node", "filename": 15, "loc": "return self.evaluate_expr("}, {"line": 263, "name": "wrapper", "filename": 14, "loc": "return retlog(fn(*args, **kwargs))"}, {"line": 6672, "name": "evaluate_expr", "filename": 15, "loc": "return self._evaluate_expr("}, {"line": 6931, "name": "_evaluate_expr", "filename": 15, "loc": "self._log_guard(\"eval\", g, forcing_spec=forcing_spec)"}, {"line": 6592, "name": "_log_guard", "filename": 15, "loc": "dtrace_structured("}, {"line": 1305, "name": "dtrace_structured", "filename": 9, "loc": "trace_structured("}]}
V0318 16:58:12.170000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/utils/_stats.py", 25]}
V0318 16:58:12.170000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_subclasses/fake_impls.py", 26]}
V0318 16:58:12.170000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/export/_safeguard.py", 27]}
V0318 16:58:12.186000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py", 28]}
V0318 16:58:12.186000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_functorch/_aot_autograd/dispatch_and_compile_graph.py", 29]}
V0318 16:58:12.186000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/fx/experimental/proxy_tensor.py", 30]}
V0318 16:58:12.186000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_compile.py", 31]}
V0318 16:58:12.186000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_dynamo/eval_frame.py", 32]}
V0318 16:58:12.186000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/fx/_symbolic_trace.py", 33]}
V0318 16:58:12.186000 3104603 torch/_logging/structured.py:27] {"str": ["<string>", 34]}
V0318 16:58:12.187000 3104603 torch/_logging/structured.py:27] {"str": ["/data/users/angelayi/pytorch/torch/_ops.py", 35]}
V0318 16:58:12.219000 3104603 torch/_logging/_internal.py:1305] {"exported_program": {}, "stack": [{"line": 545, "name": "<module>", "filename": 0, "loc": "run_tests()"}, {"line": 1342, "name": "run_tests", "filename": 1, "loc": "unittest.main(argv=argv)"}, {"line": 101, "name": "__init__", "filename": 2, "loc": "self.runTests()"}, {"line": 271, "name": "runTests", "filename": 2, "loc": "self.result = testRunner.run(self.test)"}, {"line": 184, "name": "run", "filename": 3, "loc": "test(result)"}, {"line": 84, "name": "__call__", "filename": 4, "loc": "return self.run(*args, **kwds)"}, {"line": 122, "name": "run", "filename": 4, "loc": "test(result)"}, {"line": 84, "name": "__call__", "filename": 4, "loc": "return self.run(*args, **kwds)"}, {"line": 122, "name": "run", "filename": 4, "loc": "test(result)"}, {"line": 650, "name": "__call__", "filename": 5, "loc": "return self.run(*args, **kwds)"}, {"line": 3321, "name": "run", "filename": 1, "loc": "self._run_custom("}, {"line": 3293, "name": "_run_custom", "filename": 1, "loc": "super_run(result=result)"}, {"line": 591, "name": "run", "filename": 5, "loc": "self._callTestMethod(testMethod)"}, {"line": 549, "name": "_callTestMethod", "filename": 5, "loc": "method()"}, {"line": 3153, "name": "wrapper", "filename": 1, "loc": "method(*args, **kwargs)"}, {"line": 302, "name": "test_shape_failure", "filename": 0, "loc": "ep = draft_export(M(), inp, dynamic_shapes={\"a\": {0: Dim(\"a0\")}})"}, {"line": 387, "name": "draft_export", "filename": 6, "loc": "ep = _export("}, {"line": 1065, "name": "wrapper", "filename": 7, "loc": "ep = fn(*args, **kwargs)"}, {"line": 121, "name": "wrapper", "filename": 8, "loc": "return fn(*args, **kwargs)"}, {"line": 2150, "name": "_export", "filename": 7, "loc": "dtrace_structured(\"exported_program\", payload_fn=lambda: str(exported_program))"}, {"line": 1305, "name": "dtrace_structured", "filename": 9, "loc": "trace_structured("}], "has_payload": "ad5752e29c50d388a36417d1031ae0e7"}
	ExportedProgram:
	    class GraphModule(torch.nn.Module):
	        def forward(self, a: "f32[3, 3]"):
	             # File: /data/users/angelayi/pytorch/test/export/test_draft_export.py:298 in forward, code: return a * a
	            mul: "f32[3, 3]" = torch.ops.aten.mul.Tensor(a, a);  a = None
	            return (mul,)

	Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='a'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='mul'), target=None)])
	Range constraints: {}
